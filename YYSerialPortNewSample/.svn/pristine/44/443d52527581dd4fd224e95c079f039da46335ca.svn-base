package com.lomoment.serialportsample;

import android.content.Context;
import android.util.Log;

import com.lomoment.serialportsdk.GBCode;
import com.lomoment.serialportsdk.GBSerialPort;

import java.util.HashMap;
import java.util.Map;

/**
 * @author libin
 * @date 2018/5/22
 * @Description 单片机管理
 */

public class SingleChipManager implements GBSerialPort.SerialPortResponseListener, GBSerialPort.MachineQueryResponseListener {
    public static final String TAG = SingleChipManager.class.getSimpleName();
    //串口路径
    public static final String SERICAL_PORT_PATH = "/dev/ttyS4";
    //波特率
    public static final int BAUDRATE = 115200;

    private static SingleChipManager mInstance;
    private GBSerialPort serialPort;

    private Map<String, DeliverInfo> sendReq;

    public DeliverDiSposeListener deliverDiSposeListener;

    private SingleChipManager() {
        sendReq = new HashMap<>();
    }

    public static SingleChipManager getInstance() {
        if (mInstance == null) {
            synchronized (SingleChipManager.class) {
                if (mInstance == null) {
                    mInstance = new SingleChipManager();
                }
            }
        }
        return mInstance;
    }

    /**
     * 初始化串口
     *
     * @param context
     */
    public void init(Context context) {
        init(context, SERICAL_PORT_PATH, BAUDRATE);
    }


    public void init(Context context, String path, int baudrate) {
        if (serialPort != null) {
            serialPort.recycle();
        }
        serialPort = new GBSerialPort(context);
        //开启日志
        serialPort.setShowLog(true);
        //设置串口路径
        serialPort.init(path, baudrate);
        //设置出货监听
        serialPort.setSerialPortResponseListener(this);
        //设置查询下位机监听
        serialPort.setMachineQueryResponseListener(this);
    }

    /**
     * 出货回调
     *
     * @param mcuid    机器mcuid
     * @param opration 操作指令
     * @param result   返回结果
     * @param seq      指令序列号
     * @param vals     参数
     */
    @Override
    public void response(String mcuid, int opration, int result, String seq, int... vals) {
        if (sendReq.containsKey(seq)) {
            if (opration == GBCode.OP_COMMAND_DELIVERY) {
                //删除已处理seq
                DeliverInfo deliverInfo = sendReq.remove(seq);
                if (deliverDiSposeListener != null) {
                    deliverDiSposeListener.deliverListener(deliverInfo, seq, result, vals[0], vals[1], vals[2]);
                }
            }
        } else {
            Log.d(TAG, "未知seq : " + seq);
        }

    }

    /**
     * 查询下位机回调
     *
     * @param map 当前机器 String  机器mcuid,byte 机器路由端口
     *            端口：
     */
    @Override
    public void queryListener(Map<String, Byte> map) {
        Log.d(TAG, "当前机器：" + map.toString());

        if (deliverDiSposeListener != null) {
            deliverDiSposeListener.queryMachine(map);
        }

    }

    /**
     * 查询下位机
     */
    public void sendQueryMachineMsg() {
        if (serialPort != null) {
            serialPort.sendQueryMachineMsg();
        }
    }

    /**
     * 清除任务
     */
    public void cleatTask() {
        if (serialPort != null) {
            serialPort.clearTask();
        }
    }


    /**
     * 发送出货消息
     *
     * @param t 出货处理类
     */
    public <T extends DeliverInfo> void sendDeliverMsg(T t) {
        if (serialPort != null) {
            sendReq.put(serialPort.sendDeliveryPacketMsg(t.machine, t.x, t.y), t);
        }
    }

    /**
     * 清除所有seq
     */
    public void sendClearAllSeqMsg() {
        if (serialPort != null) {
            serialPort.sendClearAllSeqMsg();
        }
    }

    /**
     * 回收
     */
    public void recycle() {
        if (serialPort != null) {
            serialPort.recycle();
        }
    }


    /**
     * 根据下位机端口获取机器编号
     *
     * @param s
     * @return
     */
    public byte getMachinePortByNumber(String s) {
        return serialPort.getMachinePortByNumber(s);
    }

    /**
     * 查询下位机是否存在
     *
     * @param s
     * @return
     */
    public boolean isExistMachineNumber(String s) {
        return serialPort.isExistMachineNumber(s);
    }

    /**
     * 根据下位机编号获取设备版本
     *
     * @param s
     * @return
     */
    public int getMachineVersionByNumber(String s) {
        return serialPort.getMachineVersionByNumber(s);
    }

    /**
     * 自定义出货监听
     */
    public interface DeliverDiSposeListener {
        public void deliverListener(DeliverInfo deliverInfo, String seq, int result, int appendState, int x, int y);

        public void queryMachine(Map<String, Byte> map);
    }

    public void setDeliverDiSposeListener(DeliverDiSposeListener deliverDiSposeListener) {
        this.deliverDiSposeListener = deliverDiSposeListener;
    }


}
